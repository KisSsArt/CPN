#pragma once
#include <cstddef>
#include <cstdint>

// 2020-06-18 16:38:03.185668200 UTC

namespace hazedumper {
	inline std::int64_t timestamp = 1592498283;
	namespace netvars {
		inline std::ptrdiff_t cs_gamerules_data = 0x0;
		inline std::ptrdiff_t m_ArmorValue = 0xB378;
		inline std::ptrdiff_t m_Collision = 0x320;
		inline std::ptrdiff_t m_CollisionGroup = 0x474;
		inline std::ptrdiff_t m_Local = 0x2FBC;
		inline std::ptrdiff_t m_MoveType = 0x25C;
		inline std::ptrdiff_t m_OriginalOwnerXuidHigh = 0x31C4;
		inline std::ptrdiff_t m_OriginalOwnerXuidLow = 0x31C0;
		inline std::ptrdiff_t m_SurvivalGameRuleDecisionTypes = 0x1320;
		inline std::ptrdiff_t m_SurvivalRules = 0xCF8;
		inline std::ptrdiff_t m_aimPunchAngle = 0x302C;
		inline std::ptrdiff_t m_aimPunchAngleVel = 0x3038;
		inline std::ptrdiff_t m_angEyeAnglesX = 0xB37C;
		inline std::ptrdiff_t m_angEyeAnglesY = 0xB380;
		inline std::ptrdiff_t m_bBombPlanted = 0x99D;
		inline std::ptrdiff_t m_bFreezePeriod = 0x20;
		inline std::ptrdiff_t m_bGunGameImmunity = 0x3944;
		inline std::ptrdiff_t m_bHasDefuser = 0xB388;
		inline std::ptrdiff_t m_bHasHelmet = 0xB36C;
		inline std::ptrdiff_t m_bInReload = 0x32A5;
		inline std::ptrdiff_t m_bIsDefusing = 0x3930;
		inline std::ptrdiff_t m_bIsQueuedMatchmaking = 0x74;
		inline std::ptrdiff_t m_bIsScoped = 0x3928;
		inline std::ptrdiff_t m_bIsValveDS = 0x75;
		inline std::ptrdiff_t m_bSpotted = 0x93D;
		inline std::ptrdiff_t m_bSpottedByMask = 0x980;
		inline std::ptrdiff_t m_bStartedArming = 0x33F0;
		inline std::ptrdiff_t m_bUseCustomAutoExposureMax = 0x9D9;
		inline std::ptrdiff_t m_bUseCustomAutoExposureMin = 0x9D8;
		inline std::ptrdiff_t m_bUseCustomBloomScale = 0x9DA;
		inline std::ptrdiff_t m_clrRender = 0x70;
		inline std::ptrdiff_t m_dwBoneMatrix = 0x26A8;
		inline std::ptrdiff_t m_fAccuracyPenalty = 0x3330;
		inline std::ptrdiff_t m_fFlags = 0x104;
		inline std::ptrdiff_t m_flC4Blow = 0x2990;
		inline std::ptrdiff_t m_flCustomAutoExposureMax = 0x9E0;
		inline std::ptrdiff_t m_flCustomAutoExposureMin = 0x9DC;
		inline std::ptrdiff_t m_flCustomBloomScale = 0x9E4;
		inline std::ptrdiff_t m_flDefuseCountDown = 0x29AC;
		inline std::ptrdiff_t m_flDefuseLength = 0x29A8;
		inline std::ptrdiff_t m_flFallbackWear = 0x31D0;
		inline std::ptrdiff_t m_flFlashDuration = 0xA420;
		inline std::ptrdiff_t m_flFlashMaxAlpha = 0xA41C;
		inline std::ptrdiff_t m_flLastBoneSetupTime = 0x2924;
		inline std::ptrdiff_t m_flLowerBodyYawTarget = 0x3A90;
		inline std::ptrdiff_t m_flNextAttack = 0x2D70;
		inline std::ptrdiff_t m_flNextPrimaryAttack = 0x3238;
		inline std::ptrdiff_t m_flSimulationTime = 0x268;
		inline std::ptrdiff_t m_flTimerLength = 0x2994;
		inline std::ptrdiff_t m_hActiveWeapon = 0x2EF8;
		inline std::ptrdiff_t m_hMyWeapons = 0x2DF8;
		inline std::ptrdiff_t m_hObserverTarget = 0x338C;
		inline std::ptrdiff_t m_hOwner = 0x29CC;
		inline std::ptrdiff_t m_hOwnerEntity = 0x14C;
		inline std::ptrdiff_t m_iAccountID = 0x2FC8;
		inline std::ptrdiff_t m_iClip1 = 0x3264;
		inline std::ptrdiff_t m_iCompetitiveRanking = 0x1A84;
		inline std::ptrdiff_t m_iCompetitiveWins = 0x1B88;
		inline std::ptrdiff_t m_iCrosshairId = 0xB3E4;
		inline std::ptrdiff_t m_iEntityQuality = 0x2FAC;
		inline std::ptrdiff_t m_iFOV = 0x31E4;
		inline std::ptrdiff_t m_iFOVStart = 0x31E8;
		inline std::ptrdiff_t m_iGlowIndex = 0xA438;
		inline std::ptrdiff_t m_iHealth = 0x100;
		inline std::ptrdiff_t m_iItemDefinitionIndex = 0x2FAA;
		inline std::ptrdiff_t m_iItemIDHigh = 0x2FC0;
		inline std::ptrdiff_t m_iMostRecentModelBoneCounter = 0x2690;
		inline std::ptrdiff_t m_iObserverMode = 0x3378;
		inline std::ptrdiff_t m_iShotsFired = 0xA390;
		inline std::ptrdiff_t m_iState = 0x3258;
		inline std::ptrdiff_t m_iTeamNum = 0xF4;
		inline std::ptrdiff_t m_lifeState = 0x25F;
		inline std::ptrdiff_t m_nFallbackPaintKit = 0x31C8;
		inline std::ptrdiff_t m_nFallbackSeed = 0x31CC;
		inline std::ptrdiff_t m_nFallbackStatTrak = 0x31D4;
		inline std::ptrdiff_t m_nForceBone = 0x268C;
		inline std::ptrdiff_t m_nTickBase = 0x3430;
		inline std::ptrdiff_t m_rgflCoordinateFrame = 0x444;
		inline std::ptrdiff_t m_szCustomName = 0x303C;
		inline std::ptrdiff_t m_szLastPlaceName = 0x35B4;
		inline std::ptrdiff_t m_thirdPersonViewAngles = 0x31D8;
		inline std::ptrdiff_t m_vecOrigin = 0x138;
		inline std::ptrdiff_t m_vecVelocity = 0x114;
		inline std::ptrdiff_t m_vecViewOffset = 0x108;
		inline std::ptrdiff_t m_viewPunchAngle = 0x3020;
	} // namespace netvars
	namespace signatures {
		inline std::ptrdiff_t anim_overlays = 0x2980;
		inline std::ptrdiff_t clientstate_choked_commands = 0x4D28;
		inline std::ptrdiff_t clientstate_delta_ticks = 0x174;
		inline std::ptrdiff_t clientstate_last_outgoing_command = 0x4D24;
		inline std::ptrdiff_t clientstate_net_channel = 0x9C;
		inline std::ptrdiff_t convar_name_hash_table = 0x2F0F8;
		inline std::ptrdiff_t dwClientState = 0x58ADD4;
		inline std::ptrdiff_t dwClientState_GetLocalPlayer = 0x180;
		inline std::ptrdiff_t dwClientState_IsHLTV = 0x4D40;
		inline std::ptrdiff_t dwClientState_Map = 0x28C;
		inline std::ptrdiff_t dwClientState_MapDirectory = 0x188;
		inline std::ptrdiff_t dwClientState_MaxPlayer = 0x388;
		inline std::ptrdiff_t dwClientState_PlayerInfo = 0x52B8;
		inline std::ptrdiff_t dwClientState_State = 0x108;
		inline std::ptrdiff_t dwClientState_ViewAngles = 0x4D88;
		inline std::ptrdiff_t dwEntityList = 0x4D5022C;
		inline std::ptrdiff_t dwForceAttack = 0x318179C;
		inline std::ptrdiff_t dwForceAttack2 = 0x31817A8;
		inline std::ptrdiff_t dwForceBackward = 0x31817F0;
		inline std::ptrdiff_t dwForceForward = 0x31817CC;
		inline std::ptrdiff_t dwForceJump = 0x51F9EC4;
		inline std::ptrdiff_t dwForceLeft = 0x31817E4;
		inline std::ptrdiff_t dwForceRight = 0x318176C;
		inline std::ptrdiff_t dwGameDir = 0x6296F8;
		inline std::ptrdiff_t dwGameRulesProxy = 0x526D1BC;
		inline std::ptrdiff_t dwGetAllClasses = 0xD6203C;
		inline std::ptrdiff_t dwGlobalVars = 0x58AAD8;
		inline std::ptrdiff_t dwGlowObjectManager = 0x5298070;
		inline std::ptrdiff_t dwInput = 0x51A17D8;
		inline std::ptrdiff_t dwInterfaceLinkList = 0x9049E4;
		inline std::ptrdiff_t dwLocalPlayer = 1; // 13876204 0xD3BBEC
		inline std::ptrdiff_t dwMouseEnable = 0xD41790;
		inline std::ptrdiff_t dwMouseEnablePtr = 0xD41760;
		inline std::ptrdiff_t dwPlayerResource = 0x317FB10;
		inline std::ptrdiff_t dwRadarBase = 0x5184F9C;
		inline std::ptrdiff_t dwSensitivity = 0xD4162C;
		inline std::ptrdiff_t dwSensitivityPtr = 0xD41600;
		inline std::ptrdiff_t dwSetClanTag = 0x89FB0;
		inline std::ptrdiff_t dwViewMatrix = 0x4D41B74;
		inline std::ptrdiff_t dwWeaponTable = 0x51A2298;
		inline std::ptrdiff_t dwWeaponTableIndex = 0x325C;
		inline std::ptrdiff_t dwYawPtr = 0xD413F0;
		inline std::ptrdiff_t dwZoomSensitivityRatioPtr = 0xD46638;
		inline std::ptrdiff_t dwbSendPackets = 0xD415A;
		inline std::ptrdiff_t dwppDirect3DDevice9 = 0xA7030;
		inline std::ptrdiff_t find_hud_element = 0x26A82460;
		inline std::ptrdiff_t force_update_spectator_glow = 0x3A1032;
		inline std::ptrdiff_t interface_engine_cvar = 0x3E9EC;
		inline std::ptrdiff_t is_c4_owner = 0x3ADAD0;
		inline std::ptrdiff_t m_bDormant = 0xED;
		inline std::ptrdiff_t m_flSpawnTime = 0xA370;
		inline std::ptrdiff_t m_pStudioHdr = 0x294C;
		inline std::ptrdiff_t m_pitchClassPtr = 0x5185238;
		inline std::ptrdiff_t m_yawClassPtr = 0xD413F0;
		inline std::ptrdiff_t model_ambient_min = 0x58DE4C;
		inline std::ptrdiff_t set_abs_angles = 0x1D52D0;
		inline std::ptrdiff_t set_abs_origin = 0x1D5110;
	} // namespace signatures
} // namespace hazedumper
